//
// Script Remote Debugger Protocol 2
//	- WebSocket Communication
//		- binary/json format
//	- Host : Interpreter Client (Run Script, c++)
//	- Remote : WebServer or WebBrowser (javascript)
//	- h2r : Host Client -> Remote Server Protocol
//	- r2h : Remote Server -> Host Client Protocol
//


protocol r2h 5301 json
{
	Welcome( string msg );
	UploadIntermediateCode(int itprId, string code );
	ReqIntermediateCode(int itprId);
	ReqRun(int itprId, string runType);
	ReqOneStep(int itprId);
	ReqResumeRun(int itprId);
	ReqBreak(int itprId);
	ReqBreakPoint( int itprId, bool enable, uint id);
	ReqStop(int itprId);
	ReqInput(int itprId, int vmIdx, string eventName);
	ReqEvent(int itprId, int vmIdx, string eventName);
	ReqStepDebugType(int stepDbgType);
	ReqHeartBeat();
}


protocol h2r 5300 json
{
	AckUploadIntermediateCode(int itprId, int result );
	AckIntermediateCode( int itprId, int result, uint count, uint index, vector<BYTE> data );
	AckRun( int itprId, int result );
	AckOneStep( int itprId, int result );
	AckResumeRun( int itprId, int result );
	AckBreak( int itprId, int result );
	AckBreakPoint( int itprId, bool enable, uint id, int result );
	AckStop( int itprId, int result );
	AckInput( int itprId, int result );
	AckEvent( int itprId, int vmIdx, string eventName, int result);
	AckStepDebugType(int stepDbgType, int result);
	SyncVMInstruction( int itprId, int vmIdx, vector<ushort> indices );
	SyncVMRegister( int itprId, int vmIdx, int infoType, script::cVirtualMachine::sRegister reg );
	SyncVMSymbolTable( int itprId, int vmIdx, uint start, uint count, vector<script::sSyncSymbol> symbol );
	SyncVMOutput( int itprId, int vmIdx, string output );
	AckHeartBeat();
}


// custom struct type
type sSyncSymbol
{
	string scope;
	string name;
	variant_t var;
}

type sRegister
{
	uint idx;
	bool cmp;
	vector<variant_t> val;
}

